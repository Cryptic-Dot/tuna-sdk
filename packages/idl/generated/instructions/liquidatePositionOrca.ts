/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TUNA_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const LIQUIDATE_POSITION_ORCA_DISCRIMINATOR = new Uint8Array([
  62, 92, 176, 35, 164, 100, 46, 141,
]);

export function getLiquidatePositionOrcaDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LIQUIDATE_POSITION_ORCA_DISCRIMINATOR
  );
}

export type LiquidatePositionOrcaInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountTunaConfig extends string | IAccountMeta<string> = string,
  TAccountMarket extends string | IAccountMeta<string> = string,
  TAccountVaultA extends string | IAccountMeta<string> = string,
  TAccountVaultB extends string | IAccountMeta<string> = string,
  TAccountVaultAAta extends string | IAccountMeta<string> = string,
  TAccountVaultBAta extends string | IAccountMeta<string> = string,
  TAccountTunaPosition extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAta extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaA extends string | IAccountMeta<string> = string,
  TAccountTunaPositionAtaB extends string | IAccountMeta<string> = string,
  TAccountLiquidationFeeRecipientAtaA extends
    | string
    | IAccountMeta<string> = string,
  TAccountLiquidationFeeRecipientAtaB extends
    | string
    | IAccountMeta<string> = string,
  TAccountWhirlpoolProgram extends string | IAccountMeta<string> = string,
  TAccountWhirlpool extends string | IAccountMeta<string> = string,
  TAccountPoolVaultAtaA extends string | IAccountMeta<string> = string,
  TAccountPoolVaultAtaB extends string | IAccountMeta<string> = string,
  TAccountOrcaPosition extends string | IAccountMeta<string> = string,
  TAccountTickArrayLower extends string | IAccountMeta<string> = string,
  TAccountTickArrayUpper extends string | IAccountMeta<string> = string,
  TAccountOrcaOracle extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTunaConfig extends string
        ? ReadonlyAccount<TAccountTunaConfig>
        : TAccountTunaConfig,
      TAccountMarket extends string
        ? ReadonlyAccount<TAccountMarket>
        : TAccountMarket,
      TAccountVaultA extends string
        ? WritableAccount<TAccountVaultA>
        : TAccountVaultA,
      TAccountVaultB extends string
        ? WritableAccount<TAccountVaultB>
        : TAccountVaultB,
      TAccountVaultAAta extends string
        ? WritableAccount<TAccountVaultAAta>
        : TAccountVaultAAta,
      TAccountVaultBAta extends string
        ? WritableAccount<TAccountVaultBAta>
        : TAccountVaultBAta,
      TAccountTunaPosition extends string
        ? WritableAccount<TAccountTunaPosition>
        : TAccountTunaPosition,
      TAccountTunaPositionAta extends string
        ? WritableAccount<TAccountTunaPositionAta>
        : TAccountTunaPositionAta,
      TAccountTunaPositionAtaA extends string
        ? WritableAccount<TAccountTunaPositionAtaA>
        : TAccountTunaPositionAtaA,
      TAccountTunaPositionAtaB extends string
        ? WritableAccount<TAccountTunaPositionAtaB>
        : TAccountTunaPositionAtaB,
      TAccountLiquidationFeeRecipientAtaA extends string
        ? WritableAccount<TAccountLiquidationFeeRecipientAtaA>
        : TAccountLiquidationFeeRecipientAtaA,
      TAccountLiquidationFeeRecipientAtaB extends string
        ? WritableAccount<TAccountLiquidationFeeRecipientAtaB>
        : TAccountLiquidationFeeRecipientAtaB,
      TAccountWhirlpoolProgram extends string
        ? ReadonlyAccount<TAccountWhirlpoolProgram>
        : TAccountWhirlpoolProgram,
      TAccountWhirlpool extends string
        ? WritableAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountPoolVaultAtaA extends string
        ? WritableAccount<TAccountPoolVaultAtaA>
        : TAccountPoolVaultAtaA,
      TAccountPoolVaultAtaB extends string
        ? WritableAccount<TAccountPoolVaultAtaB>
        : TAccountPoolVaultAtaB,
      TAccountOrcaPosition extends string
        ? WritableAccount<TAccountOrcaPosition>
        : TAccountOrcaPosition,
      TAccountTickArrayLower extends string
        ? WritableAccount<TAccountTickArrayLower>
        : TAccountTickArrayLower,
      TAccountTickArrayUpper extends string
        ? WritableAccount<TAccountTickArrayUpper>
        : TAccountTickArrayUpper,
      TAccountOrcaOracle extends string
        ? WritableAccount<TAccountOrcaOracle>
        : TAccountOrcaOracle,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type LiquidatePositionOrcaInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type LiquidatePositionOrcaInstructionDataArgs = {};

export function getLiquidatePositionOrcaInstructionDataEncoder(): Encoder<LiquidatePositionOrcaInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: LIQUIDATE_POSITION_ORCA_DISCRIMINATOR,
    })
  );
}

export function getLiquidatePositionOrcaInstructionDataDecoder(): Decoder<LiquidatePositionOrcaInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getLiquidatePositionOrcaInstructionDataCodec(): Codec<
  LiquidatePositionOrcaInstructionDataArgs,
  LiquidatePositionOrcaInstructionData
> {
  return combineCodec(
    getLiquidatePositionOrcaInstructionDataEncoder(),
    getLiquidatePositionOrcaInstructionDataDecoder()
  );
}

export type LiquidatePositionOrcaInput<
  TAccountAuthority extends string = string,
  TAccountTunaConfig extends string = string,
  TAccountMarket extends string = string,
  TAccountVaultA extends string = string,
  TAccountVaultB extends string = string,
  TAccountVaultAAta extends string = string,
  TAccountVaultBAta extends string = string,
  TAccountTunaPosition extends string = string,
  TAccountTunaPositionAta extends string = string,
  TAccountTunaPositionAtaA extends string = string,
  TAccountTunaPositionAtaB extends string = string,
  TAccountLiquidationFeeRecipientAtaA extends string = string,
  TAccountLiquidationFeeRecipientAtaB extends string = string,
  TAccountWhirlpoolProgram extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountPoolVaultAtaA extends string = string,
  TAccountPoolVaultAtaB extends string = string,
  TAccountOrcaPosition extends string = string,
  TAccountTickArrayLower extends string = string,
  TAccountTickArrayUpper extends string = string,
  TAccountOrcaOracle extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /**
   *
   * TUNA accounts
   *
   */
  authority: TransactionSigner<TAccountAuthority>;
  tunaConfig: Address<TAccountTunaConfig>;
  market: Address<TAccountMarket>;
  vaultA: Address<TAccountVaultA>;
  vaultB: Address<TAccountVaultB>;
  vaultAAta: Address<TAccountVaultAAta>;
  vaultBAta: Address<TAccountVaultBAta>;
  tunaPosition: Address<TAccountTunaPosition>;
  tunaPositionAta: Address<TAccountTunaPositionAta>;
  tunaPositionAtaA: Address<TAccountTunaPositionAtaA>;
  tunaPositionAtaB: Address<TAccountTunaPositionAtaB>;
  liquidationFeeRecipientAtaA: Address<TAccountLiquidationFeeRecipientAtaA>;
  liquidationFeeRecipientAtaB: Address<TAccountLiquidationFeeRecipientAtaB>;
  /**
   *
   * ORCA accounts
   *
   */
  whirlpoolProgram: Address<TAccountWhirlpoolProgram>;
  whirlpool: Address<TAccountWhirlpool>;
  poolVaultAtaA: Address<TAccountPoolVaultAtaA>;
  poolVaultAtaB: Address<TAccountPoolVaultAtaB>;
  orcaPosition: Address<TAccountOrcaPosition>;
  tickArrayLower: Address<TAccountTickArrayLower>;
  tickArrayUpper: Address<TAccountTickArrayUpper>;
  orcaOracle: Address<TAccountOrcaOracle>;
  /**
   *
   * Other accounts
   *
   */
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getLiquidatePositionOrcaInstruction<
  TAccountAuthority extends string,
  TAccountTunaConfig extends string,
  TAccountMarket extends string,
  TAccountVaultA extends string,
  TAccountVaultB extends string,
  TAccountVaultAAta extends string,
  TAccountVaultBAta extends string,
  TAccountTunaPosition extends string,
  TAccountTunaPositionAta extends string,
  TAccountTunaPositionAtaA extends string,
  TAccountTunaPositionAtaB extends string,
  TAccountLiquidationFeeRecipientAtaA extends string,
  TAccountLiquidationFeeRecipientAtaB extends string,
  TAccountWhirlpoolProgram extends string,
  TAccountWhirlpool extends string,
  TAccountPoolVaultAtaA extends string,
  TAccountPoolVaultAtaB extends string,
  TAccountOrcaPosition extends string,
  TAccountTickArrayLower extends string,
  TAccountTickArrayUpper extends string,
  TAccountOrcaOracle extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof TUNA_PROGRAM_ADDRESS,
>(
  input: LiquidatePositionOrcaInput<
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountMarket,
    TAccountVaultA,
    TAccountVaultB,
    TAccountVaultAAta,
    TAccountVaultBAta,
    TAccountTunaPosition,
    TAccountTunaPositionAta,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountLiquidationFeeRecipientAtaA,
    TAccountLiquidationFeeRecipientAtaB,
    TAccountWhirlpoolProgram,
    TAccountWhirlpool,
    TAccountPoolVaultAtaA,
    TAccountPoolVaultAtaB,
    TAccountOrcaPosition,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountOrcaOracle,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): LiquidatePositionOrcaInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountTunaConfig,
  TAccountMarket,
  TAccountVaultA,
  TAccountVaultB,
  TAccountVaultAAta,
  TAccountVaultBAta,
  TAccountTunaPosition,
  TAccountTunaPositionAta,
  TAccountTunaPositionAtaA,
  TAccountTunaPositionAtaB,
  TAccountLiquidationFeeRecipientAtaA,
  TAccountLiquidationFeeRecipientAtaB,
  TAccountWhirlpoolProgram,
  TAccountWhirlpool,
  TAccountPoolVaultAtaA,
  TAccountPoolVaultAtaB,
  TAccountOrcaPosition,
  TAccountTickArrayLower,
  TAccountTickArrayUpper,
  TAccountOrcaOracle,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TUNA_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    tunaConfig: { value: input.tunaConfig ?? null, isWritable: false },
    market: { value: input.market ?? null, isWritable: false },
    vaultA: { value: input.vaultA ?? null, isWritable: true },
    vaultB: { value: input.vaultB ?? null, isWritable: true },
    vaultAAta: { value: input.vaultAAta ?? null, isWritable: true },
    vaultBAta: { value: input.vaultBAta ?? null, isWritable: true },
    tunaPosition: { value: input.tunaPosition ?? null, isWritable: true },
    tunaPositionAta: { value: input.tunaPositionAta ?? null, isWritable: true },
    tunaPositionAtaA: {
      value: input.tunaPositionAtaA ?? null,
      isWritable: true,
    },
    tunaPositionAtaB: {
      value: input.tunaPositionAtaB ?? null,
      isWritable: true,
    },
    liquidationFeeRecipientAtaA: {
      value: input.liquidationFeeRecipientAtaA ?? null,
      isWritable: true,
    },
    liquidationFeeRecipientAtaB: {
      value: input.liquidationFeeRecipientAtaB ?? null,
      isWritable: true,
    },
    whirlpoolProgram: {
      value: input.whirlpoolProgram ?? null,
      isWritable: false,
    },
    whirlpool: { value: input.whirlpool ?? null, isWritable: true },
    poolVaultAtaA: { value: input.poolVaultAtaA ?? null, isWritable: true },
    poolVaultAtaB: { value: input.poolVaultAtaB ?? null, isWritable: true },
    orcaPosition: { value: input.orcaPosition ?? null, isWritable: true },
    tickArrayLower: { value: input.tickArrayLower ?? null, isWritable: true },
    tickArrayUpper: { value: input.tickArrayUpper ?? null, isWritable: true },
    orcaOracle: { value: input.orcaOracle ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tunaConfig),
      getAccountMeta(accounts.market),
      getAccountMeta(accounts.vaultA),
      getAccountMeta(accounts.vaultB),
      getAccountMeta(accounts.vaultAAta),
      getAccountMeta(accounts.vaultBAta),
      getAccountMeta(accounts.tunaPosition),
      getAccountMeta(accounts.tunaPositionAta),
      getAccountMeta(accounts.tunaPositionAtaA),
      getAccountMeta(accounts.tunaPositionAtaB),
      getAccountMeta(accounts.liquidationFeeRecipientAtaA),
      getAccountMeta(accounts.liquidationFeeRecipientAtaB),
      getAccountMeta(accounts.whirlpoolProgram),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.poolVaultAtaA),
      getAccountMeta(accounts.poolVaultAtaB),
      getAccountMeta(accounts.orcaPosition),
      getAccountMeta(accounts.tickArrayLower),
      getAccountMeta(accounts.tickArrayUpper),
      getAccountMeta(accounts.orcaOracle),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getLiquidatePositionOrcaInstructionDataEncoder().encode({}),
  } as LiquidatePositionOrcaInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountTunaConfig,
    TAccountMarket,
    TAccountVaultA,
    TAccountVaultB,
    TAccountVaultAAta,
    TAccountVaultBAta,
    TAccountTunaPosition,
    TAccountTunaPositionAta,
    TAccountTunaPositionAtaA,
    TAccountTunaPositionAtaB,
    TAccountLiquidationFeeRecipientAtaA,
    TAccountLiquidationFeeRecipientAtaB,
    TAccountWhirlpoolProgram,
    TAccountWhirlpool,
    TAccountPoolVaultAtaA,
    TAccountPoolVaultAtaB,
    TAccountOrcaPosition,
    TAccountTickArrayLower,
    TAccountTickArrayUpper,
    TAccountOrcaOracle,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedLiquidatePositionOrcaInstruction<
  TProgram extends string = typeof TUNA_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     *
     * TUNA accounts
     *
     */

    authority: TAccountMetas[0];
    tunaConfig: TAccountMetas[1];
    market: TAccountMetas[2];
    vaultA: TAccountMetas[3];
    vaultB: TAccountMetas[4];
    vaultAAta: TAccountMetas[5];
    vaultBAta: TAccountMetas[6];
    tunaPosition: TAccountMetas[7];
    tunaPositionAta: TAccountMetas[8];
    tunaPositionAtaA: TAccountMetas[9];
    tunaPositionAtaB: TAccountMetas[10];
    liquidationFeeRecipientAtaA: TAccountMetas[11];
    liquidationFeeRecipientAtaB: TAccountMetas[12];
    /**
     *
     * ORCA accounts
     *
     */

    whirlpoolProgram: TAccountMetas[13];
    whirlpool: TAccountMetas[14];
    poolVaultAtaA: TAccountMetas[15];
    poolVaultAtaB: TAccountMetas[16];
    orcaPosition: TAccountMetas[17];
    tickArrayLower: TAccountMetas[18];
    tickArrayUpper: TAccountMetas[19];
    orcaOracle: TAccountMetas[20];
    /**
     *
     * Other accounts
     *
     */

    tokenProgram: TAccountMetas[21];
  };
  data: LiquidatePositionOrcaInstructionData;
};

export function parseLiquidatePositionOrcaInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedLiquidatePositionOrcaInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 22) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      tunaConfig: getNextAccount(),
      market: getNextAccount(),
      vaultA: getNextAccount(),
      vaultB: getNextAccount(),
      vaultAAta: getNextAccount(),
      vaultBAta: getNextAccount(),
      tunaPosition: getNextAccount(),
      tunaPositionAta: getNextAccount(),
      tunaPositionAtaA: getNextAccount(),
      tunaPositionAtaB: getNextAccount(),
      liquidationFeeRecipientAtaA: getNextAccount(),
      liquidationFeeRecipientAtaB: getNextAccount(),
      whirlpoolProgram: getNextAccount(),
      whirlpool: getNextAccount(),
      poolVaultAtaA: getNextAccount(),
      poolVaultAtaB: getNextAccount(),
      orcaPosition: getNextAccount(),
      tickArrayLower: getNextAccount(),
      tickArrayUpper: getNextAccount(),
      orcaOracle: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getLiquidatePositionOrcaInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
